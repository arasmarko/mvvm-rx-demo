
========================================================================
Example 1

import UIKit
import RxSwift
import RxCocoa
import SnapKit

class DeveloperViewController: UIViewController {
    let counterLabel = UILabel()
    let increaseCounterButton = UIButton()
    let developerViewModel: DeveloperViewModel
    let disposeBag = DisposeBag()

    init(developerViewModel: DeveloperViewModel) {
        self.developerViewModel = developerViewModel
        super.init(nibName: nil, bundle: nil)
        let increaseCounterTaps = increaseCounterButton.rx.tap.asObservable()
        self.developerViewModel.setupIncreaseTaps(increaseCounterTaps: increaseCounterTaps)
        render()
        setupObservables()
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    .
    .
    .
    
    
    func setupObservables() {
        developerViewModel.counter
            .map { return "\($0)" }
            .drive(self.counterLabel.rx.text)
            .disposed(by: disposeBag)
    }
    
    
}


/////////////////

import Foundation
import RxSwift
import RxCocoa
import SwiftyJSON

enum SimulatedError: Error {
    case somethingWrong(String)
}

class DeveloperViewModel {
    var developer: Developer!
    var counterState = 0
    var counter: Driver<String>!
    
    let disposeBag = DisposeBag()
    
    init(developer: Developer) {
        self.developer = developer
    }
    
    func setupIncreaseTaps(increaseCounterTaps: Observable<Void>) {
        counter = increaseCounterTaps
            .flatMapLatest { [weak self] _ -> Observable<String> in
                guard let `self` = self else {
                    return Observable.just("0")
                }
                self.counterState += 1
                return Observable.just("\(self.counterState)")
            }
            .asDriver(onErrorJustReturn: "0")
    }
    
}
========================================================================